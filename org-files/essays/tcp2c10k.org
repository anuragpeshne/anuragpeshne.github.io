#+TITLE: tcp to c10k
#+DATE: 2016-10-30
#+OPTIONS: toc:t num:nil creator:t author:t tex:t date:t timestamp:nil p:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+HTML_HEAD: <link href='https://fonts.googleapis.com/css?family=Lato' rel='stylesheet' type='text/css'/>
#+FILETAGS:  :http:tcp:c10k

#+INCLUDE: "../../assets/ga.org"

* Brief Background
  Get's get straight to the point, here's my bucket list for next couple of years:
  the things which I want to build from scratch:
  - A Compiler
  - A Web Server
  - Something that runs on bare metal; (maybe a super primitive OS)

  It's over 4 months since I started with grad school at [[https://ufl.edu][UF]]. With the Networking
  and Concurrent Programming courses this semester, implementing a web server seems
  the most natural choice. This is my attempt to take on the 2^nd item in the list.

** Why Clojure
   Since this is a great opportunity to learn a new language, I considered Haskell
   and Clojure to implement this project.I chose Clojure over Haskell[fn:0], because:
   - Clojure is a Lisp; It's long since I worked through [[https://mitpress.mit.edu/books/little-schemer][Little Schemer]] and I was craving to write some Lisp
   - [[https://www.infoq.com/author/Rich-Hickey][Rich Hickey]]
   - [[https://news.ycombinator.com/item?id=4122764][Couple]] of [[https://www.quora.com/Which-power-programming-language-should-I-put-the-effort-into-learning-this-year-Clojure-or-Haskell][threads]] mentioning Clojure to be more 'practical'[fn:0]

   As of now, Clojure is turning out to be a great decision.

* About this essay
  I'm planning to use this essay as a journal to the project [[https://github.com/anuragpeshne/httpj][httpj]].  I'll record the
  achievements and lessons learned in a diary fashion so that this may help
  someone else to implement a HTTP server and most importantly, help me remember
  things I learned. '/Adventures of HTTP Server Implementation/' would have been
  more appropriate title for this essay. Just another note, I'm more interested
  in making a concurrent server than a perfect HTTP specification compliant server.
  Thus, I'll favor implementations that result in simpler, faster server than complete
  RFC compliant server. I'm using [[https://trello.com/b/wAJJ79cc/httpj][this board]] to manage tasks.

* Getting Started
** Echo Server
   SCHEDULED: <2016-11-02 Wed>
   The first stage is to make a simple server which accepts TCP connection and
   simply echos back everything sent to it. This was pretty straight forward, but
   a good exercise to get acquainted with the Clojure syntax and [[http://clojure.org/reference/java_interop][Java interop]].

   [[https://github.com/anuragpeshne/httpj/blob/fdf7dbccb187a655f0c4652defbdec22780da479/src/httpj/core.clj][Here's the commit]] and [[https://github.com/anuragpeshne/dfsServer/blob/master/server/Server.java][similar thing]] in Java.

** Concurrent Connections
   SCHEDULED: <2016-11-05 Sat>
   The next logical step was to make it accept multiple concurrent TCP connections.
   And the Java thing to do would have been to create a new thread to handle the new
   connection. Creating thread takes time and resources, and hence thread pool (something
   similar to ~ThreadPoolExecutor~[fn:1]) to manage and reuse threads to handle the clients
   is recommended. We can use /Java Interop/ feature of Clojure to port this to
   Clojure.

   I went to through the chapter [[http://www.braveclojure.com/concurrency/][Concurrency]] of the book 'Clojure for the brave and
   true' and found out various ways to make the program concurrent. The first and the
   easiest way is to create a [[https://clojuredocs.org/clojure.core/future][future]] object. Right now, to get the project started
   we'll use this construct; but we'll revisit concurrency after we have worked on
   the protocol implementation to a fair extent.

*** TODO Persistent Data Structure

** HTTP request and response
   Right now, our server does nothing interesting other than greeting the world.
   Let's change that; let's parse the request and try to figure out what client
   is requesting. Since we are trying to make a static server, most of our requests
   would be ~GET~ request, so let's start with them[fn:2].

   A ~GET~ request has a structure similar to[fn:3]:
   #+BEGIN_SRC html
   GET /html/index.html HTTP/1.1
   Host: localhost:8080
   User-Agent: curl/7.49.1
   Accept: */*
   <CRLF>
   #+END_SRC
   In general the HTTP request format consists of an initial line followed by several
   headers in ~key: value~ format, followed by ~CRLF~ (carriage return ~\r~ and
   line feed ~\n~) and then followed by message body (which may contain data for
   ~POST~ method).

   Other HTTP requests, such as ~POST~, and HTTP response have similar format with
   some differences in number and type of headers.

   If HTTP/1.0 is used, it's easy to know the end of request/response; socket is
   closed after each transfer, which makes implementing HTTP server and client a
   bit easy but makes the whole process a lot in efficient[fn:4].

*** Let's serve HTTP!
    Now that we know the request and response format, we can start servering HTTP,
    and by serve, I literally mean *serve* HTTP.
    We can use ~nc~[fn:5] to manually talk HTTP:
    #+BEGIN_SRC bash
    $ nc -lk 8080
    # -l make nc *listen* to socket
    # -k nc keep listening

    # now point browser to 'http://localhost:8080'
    # browser blocks, and we can see the request browser made on nc stdout
    # type in HTTP response directly into nc
    HTTP/1.1 200 OK
    Content-Length: 12

    Hello World

    # after the last blank line, the loading gears in browsers should stop and
    # 'Hello World' should appear on browser!
    #+END_SRC
*** Parsing ~GET~ request
    ~parse-request~ parses the HTTP request and returns a map ~{:headLine :headers}~
    where ~headers~ in itself is map. Parsing is straightforward splitting the string
    over ~": "~.
    #+BEGIN_SRC Clojure
    (defn parse-reqest
    "parses and returns request obj"
    [in]
    (let [inp (line-seq in)
          head-line (parse-head-line (first inp))
          headers (loop [cur-inp (rest inp) list []]
                    (if (or (= (first cur-inp) "") (nil? (first cur-inp))) list
                        (recur (rest cur-inp)
                               (conj list (apply hash-map
                                                 (str/split (first cur-inp) #": "))))))]
      {:headLine head-line, :headers headers}))
    #+END_SRC
    Most of the code is obvious. The only thing which isn't is ~loop - recur~ construct.
    ~line-seq~ returns a lazy sequence of lines from socket. We are recurring over
    the list (Lisp style), but instead of doing a function call, we are using this
    construct because Java doesn't provide tail call optimization[fn:6] and ~recur~ is a
    hack to save stacks.
*** Generating response
**** HTTP 1.0 v/s HTTP 1.1
***** ~Content-Length~ and socket close.
**** Thread first macro, ~->~
** File Server
   A subject so complicated, it needs a level 2 heading.

[fn:0] Haskell is recommended if one wants to learn FP, so I'll build something else to learn it.
[fn:1] [[https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html][Java Docs]] for ~Threadpoolexecutor~
[fn:2] I'm following along [[http://www.jmarshall.com/easy/http/][this]], brilliant yet very simple HTTP tutorial.
[fn:3] [[https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html][RFC 2616]] HTTP request format
[fn:4] [[https://en.wikipedia.org/wiki/Transmission_Control_Protocol#Connection_establishment][TCP Connection establishment]] is a long process. Hello; (Hello) Acknowledged; (Hello Acknowledged) Acknowledged.
[fn:5] man pages describe ~nc~ as: ~arbitrary TCP and UDP connections and listens~. It pipes socket to ~stdin~ and ~stdout~
[fn:6] [[https://youtu.be/2y5Pv4yN0b0?t=1h2m6s][Here]] Brian Goetz mentions they are working to get tail call optimization to JVM (but not soon)
