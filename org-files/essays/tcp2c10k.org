#+TITLE: tcp to c10k
#+DATE: 2016-10-30
#+OPTIONS: toc:t num:nil creator:t author:t tex:t date:t timestamp:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../css/style.css" />
#+HTML_HEAD: <link href='https://fonts.googleapis.com/css?family=Lato' rel='stylesheet' type='text/css'/>
#+FILETAGS:  :http:tcp:c10k

#+INCLUDE: "../../assets/ga.org"

* Brief Background
  Here's my bucket list for next couple of years: the things which I want to make
  from scratch:
  - A Compiler
  - A Web Server
  - A Text Editor
  - Something that runs on bare metal; (maybe an OS)

  It's over 4 months since I started with grad school at [[https://ufl.edu][UF]]. With the Networking
  and Concurrent Programming courses this semester, implementing a web server seemed
  the most natural step forward. This is my attempt to take on the 2^nd item in
  the list.

** Why Clojure
   I considered Haskell, Clojure and Python to build this project. Since this can
   be a great opportunity to learn a new language, Python was ruled out. I chose
   Clojure over Haskell, because:
   - Clojure is a Lisp; I was craving to write some Lisp after [[https://mitpress.mit.edu/books/little-schemer][Little Schemer]]
   - [[https://www.infoq.com/author/Rich-Hickey][Rich Hickey]]
   - [[https://news.ycombinator.com/item?id=4122764][Couple]] of [[https://www.quora.com/Which-power-programming-language-should-I-put-the-effort-into-learning-this-year-Clojure-or-Haskell][threads]] mentioning Clojure to be more 'practical'

   As of now, Clojure is turning out to be a great decision.

* About
  I'm planning to use this essay as a journal to the project [[https://github.com/anuragpeshne/httpj][httpj]].  I'll record the
  achievements and lessons learned in a diary fashion so that this may help
  someone else to implement a HTTP server and most importantly, help me remember
  things I learned. 'Adventures of HTTP Server Implementation' would have been
  more appropriate title for this essay. Just another note, I'm more interested
  in making a concurrent server than a perfect HTTP compliant server. Thus, I'll
  favor implementations that result in simpler, faster server than complete RFC
  compliant server. I'm using [[https://trello.com/b/wAJJ79cc/httpj][this board]] to manage tasks.

* Getting Started
** Echo Server
   SCHEDULED: <2016-11-02 Wed>
   The first stage is to make a simple server which accepts TCP connection and
   simply echos back everything sent to it. This was pretty straight forward, but
   a good exercise to get acquainted with the Clojure syntax.

   [[https://github.com/anuragpeshne/httpj/blob/fdf7dbccb187a655f0c4652defbdec22780da479/src/httpj/core.clj][Here's the commit]] and [[https://github.com/anuragpeshne/dfsServer/blob/master/server/Server.java][similar thing]] in Java.

** Concurrent Connections
   SCHEDULED: <2016-11-05 Sat>
   The next logical step was to make it accept multiple concurrent TCP connections.
   And the Java thing to do would have been to create a new thread to handle the new
   connection. Creating thread takes time and resources, it's better to use a thread
   pool (something similar to ~[[https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadPoolExecutor.html][ThreadPoolExecutor]]~) to manage and reuse threads to handle
   the clients. We could then use /Java Interop/ feature of Clojure to port this to
   Clojure.

   I went to through the chapter [[http://www.braveclojure.com/concurrency/][Concurrency]] of the book Clojure for the brave and true and
   found out various other methods to make the program concurrent. The first and the
   most easiest way is to create a ~[[https://clojuredocs.org/clojure.core/future][future]]~ object. Right now, to get the project started
   we'll use this construct; but we'll revisit concurrency after we have worked on
   the protocol implementation to a fair extent.

*** TODO Persistent Data Structure

** HTTP request and response
*** Parsing GET request
**** Looping: ~loop - recur~ construct
*** Generating response
**** HTTP 1.0 v/s HTTP 1.1
***** ~Content-Length~ and socket close.
**** Thread first macro, ~->~
** File Server
   A subject so complicated, it needs a level 2 heading.
