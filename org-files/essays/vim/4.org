#+TITLE: Vim: Text Manipulation
#+DATE: 2017-06-1
#+OPTIONS: toc:nil num:nil creator:t author:t tex:t timestamp:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../../css/style.css" />
#+HTML_HEAD: <link href='https://fonts.googleapis.com/css?family=Lato' rel='stylesheet' type='text/css'>
#+FILETAGS:  :vim:tutorial:yank:paste:delete:

#+INCLUDE: "../../../assets/ga.org"

This is part 4 of a series of tutorial to Vim. You can read [[./3.org][Part 3 here]].

* Copy and Paste
  Moving around text is probably the most used operation used in any text editor.
  As you might have guessed, there are couple of ways to do these operations in Vim.
** Lesson 5
   #+BEGIN_VERSE
   In Vim's lingo copying is yanking.
   You /yank/ a line.
   #+END_VERSE
   - Hit ~y~ to yank; Yank takes in range-characters, words or lines. Hit ~y3w~ to
     copy 3 words. ~y10j~ (or ~y10<downarrow>~) to yank 10 below lines. All the motion
     commands which we learned [[./3.org][last time]] can be combined with ~y~.
     - ~yy~ yanks the whole current line.
     - ~y<rightarrow>~ will yank just one character on the right.
   - ~d~ to delete stuff. Deleting not only removes text from buffer, it adds it to
     clipboard[fn:1]. So ~d~ can be used to delete as well as to /cut/.
     - ~dd~ deletes current whole line.
     - ~x~ will delete one character below the cursor.
     - ~xp~ will exchange characters, try it to see what I mean.
   - ~p~ to paste stuff. You can use ~p~ to paste to right/below and ~P~ to paste
     above/before.
   - All of them, ~y~, ~d~, ~p~, can be combined with any motion commands.

** Till, In and Around
   Let me tell you about 3 more motion commands which fit beautifully with yank and delete.
   #+BEGIN_SRC c -n
   int foo(int a, int b, char *str) {
       a += b;
       str[0] = 'd';
       return a;
   }
   #+END_SRC
   1. ~t<char>~ (*till*): it will give you text /till/ the first character is encountered
   2. ~i<bracket>~ (*in*): it will give you text in/inside the brackets
      - I've used this only with brackets, it may work with other characters which I'm
        unaware of.
   3. ~a<bracket>~ (*a* / *around*): gives back text inside bracket *along* with the
   | Initial Position         | Command | Comment                                                          | Resulting line                      | Clipboard                  |
   |--------------------------+---------+------------------------------------------------------------------+-------------------------------------+----------------------------|
   | line 1, column 0         | ~dta~   | delete *till* a                                                  | ~a, int b, char *str) {~            | ~int foo(int a~            |
   | line 1, inside '('       | ~yi(~   | yanks arguments inside '('                                       | /not changed/ since we are yanking  | ~int a, int b, char *str~  |
   | anywhere in lines 2 to 4 | ~da{~   | deletes everything inside and including {...} (body of function) | ~int foo(int a, int b, char *str) ~ | { complete function body } |
   |--------------------------+---------+------------------------------------------------------------------+-------------------------------------+----------------------------|
* Summary
  | Command   | Comment                                                               |
  |-----------+-----------------------------------------------------------------------|
  | ~y~       | *yank*, copy                                                          |
  | ~d~       | *delete* to delete as well as /cut/                                   |
  | ~p~       | *paste*                                                               |
  | ~P~       | paste above/before                                                    |
  | ~x~       | delete character below cursor                                         |
  |-----------+-----------------------------------------------------------------------|
  | ~t<char>~ | do x *till* first instance of character 'char'                        |
  | ~i<brac>~ | do x to text *inside* enclosing bracket 'brac', works with {, [, (, < |
  | ~a<brac>~ | ditto as above, includes the bracket too in capture                   |
  |-----------+-----------------------------------------------------------------------|
  - Yank, delete and paste can be combined with other motion commands
  - 'till', 'around', 'in' are your friends, remember them, specially when dealing
    with function arguments, HTML and languages which use '{' to enclose blocks.

   [[./5.org][Click here for part 5]]

[fn:1] not actually clipboard but registers, as we'll shall see.
